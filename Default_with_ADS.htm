<!DOCTYPE html>
<html>
<head>
    <title>TcAdsWebService.js Sample01</title>
    <script type="text/javascript" src="TcAdsWebService.js"></script>
    <script type="text/javascript">
        (function () {

            var NETID = ""; // Empty string for local machine;
            var PORT = "851"; // PLC Runtime
            var SERVICE_URL = "http://localhost/TcAdsWebService/TcAdsWebService.dll"; // HTTP path to the TcAdsWebService;

            var client = new TcAdsWebService.Client(SERVICE_URL, null, null);

            var general_timeout = 500;

            var readLoopID = null;
            var readLoopDelay = 500;

            var handlesCount;

            var readSymbolValuesData = null;

            // Array of symbol names to read;
            var handlesVarNames = [
                    "Main.iTest"
                    /*".gui_LV_AllLoaded"*/
                ];

            var handle;
            
            var handlesVarSize = 2;

            // Occurs if the window has loaded;
            window.onload = (function () {

                registerButtonEvent();

                handlesCount = handlesVarNames.length;
                console.log("-----------Handles Count-----------");
                console.log("   " + handlesCount);
                console.log("-----------END-----------");
                
                // Create sumcommando for reading twincat symbol handles by symbol name;
                var handleswriter = new TcAdsWebService.DataWriter();

                // Write general information for each symbol handle to the TcAdsWebService.DataWriter object;
                console.log("-----------Writing information about handles-----------")
                for (var i = 0; i < handlesVarNames.length; i++) {
                    handleswriter.writeDINT(TcAdsWebService.TcAdsReservedIndexGroups.SymbolHandleByName);
                    handleswriter.writeDINT(0);
                    handleswriter.writeDINT(4); // Expected size; A handle has a size of 4 byte;
                    handleswriter.writeDINT(handlesVarNames[i].length); // The length of the symbol name string;
                    console.log("   Handle Length: " + handlesVarNames[i].length);
                }
                console.log("-----------END-----------");
                console.log("-----------Writing handles names-----------");
                // Write symbol names after the general information to the TcAdsWebService.DataWriter object;
                for (var i = 0; i < handlesVarNames.length; i++) {
                    handleswriter.writeString(handlesVarNames[i]);
                    console.log("   Handle Name: " + handlesVarNames[i]);
                }
                console.log("-----------END-----------");
                // Send the list-read-write command to the TcAdsWebService by use of the readwrite function of the TcAdsWebService.Client object;
                client.readwrite(
                    NETID,
                    PORT,
                    0xF082, 	// IndexGroup = ADS list-read-write command; Used to request handles for twincat symbols;
                    handlesVarNames.length, // IndexOffset = Count of requested symbol handles;
                    (handlesVarNames.length * 4) + (handlesVarNames.length * 8), // Length of requested data + 4 byte errorcode and 4 byte length per twincat symbol;
                    handleswriter.getBase64EncodedData(),
                    RequestHandlesCallback,
                    null,
                    general_timeout,
                    RequestHandlesTimeoutCallback,
                    true);

                getVariableHandle();
            });

            // Occurs if the readwrite for the sumcommando has finished;
            var RequestHandlesCallback = (function (e, s) {

                if (e && e.isBusy) {
                    // HANDLE PROGRESS TASKS HERE;
                    var message = "Requesting handles...";
                    td_byteValue.innerHTML = message;
/*                    td_wordValue.innerHTML = message;
                    td_dwordValue.innerHTML = message;
                    td_sintValue.innerHTML = message;
                    td_intValue.innerHTML = message;
                    td_dintValue.innerHTML = message;
                    td_realValue.innerHTML = message;
                    td_lrealValue.innerHTML = message;*/
                    // Exit callback function because request is still busy;
                    return;
                }

                if (e && !e.hasError) {

                    // Get TcAdsWebService.DataReader object from TcAdsWebService.Response object;
                    var reader = e.reader;

                    // Read error code and length for each handle;
                    for (var i = 0; i < handlesVarNames.length; i++) {

                        var err = reader.readDWORD();
                        var len = reader.readDWORD();

                        if (err != 0) {
                            div_log.innerHTML = "Handle error!";
                            return;
                        }

                    }

                    // Read handles from TcAdsWebService.DataReader object;
                    console.log("-----------Variable Handles-----------");
                    var hByteValue = reader.readDWORD();
                    console.log("   ByteHandle: " + hByteValue);
                    /*var hWordValue = reader.readDWORD();
                    console.log("   WordHandle: " + hWordValue);
                    var hDwordValue = reader.readDWORD();
                    console.log("   DWordHandle: " + hDwordValue);
                    var hSintValue = reader.readDWORD();
                    console.log("   SIntHandle: " + hSintValue);
                    var hIntValue = reader.readDWORD();
                    console.log("   IntHandle: " + hIntValue);
                    var hDintValue = reader.readDWORD();
                    console.log("   DIntHandle: " + hDintValue);
                    var hRealValue = reader.readDWORD();
                    console.log("   RealHandle: " + hRealValue);
                    var hLrealValue = reader.readDWORD();
                    console.log("   LRealValue: " + hLrealValue) */
                    console.log("-----------END-----------");

                    // Create sum commando to read symbol values based on the handle
                    var readSymbolValuesWriter = new TcAdsWebService.DataWriter();

                    //  "MAIN.byteValue" // BYTE
                    readSymbolValuesWriter.writeDINT(TcAdsWebService.TcAdsReservedIndexGroups.SymbolValueByHandle); // IndexGroup
                    readSymbolValuesWriter.writeDINT(hByteValue); // IndexOffset = The target handle
                    readSymbolValuesWriter.writeDINT(2); // size to read

                    /*

                    //  "MAIN.wordValue" // WORD
                    readSymbolValuesWriter.writeDINT(TcAdsWebService.TcAdsReservedIndexGroups.SymbolValueByHandle); // IndexGroup
                    readSymbolValuesWriter.writeDINT(hWordValue); // IndexOffset = The target handle
                    readSymbolValuesWriter.writeDINT(1); // size to read
                    
                    //  "MAIN.dwordValue" // DWORD
                    readSymbolValuesWriter.writeDINT(TcAdsWebService.TcAdsReservedIndexGroups.SymbolValueByHandle); // IndexGroup
                    readSymbolValuesWriter.writeDINT(hDwordValue); // IndexOffset = The target handle
                    readSymbolValuesWriter.writeDINT(4); // size to read
                    
                    //  "MAIN.sintValue" // SINT
                    readSymbolValuesWriter.writeDINT(TcAdsWebService.TcAdsReservedIndexGroups.SymbolValueByHandle); // IndexGroup
                    readSymbolValuesWriter.writeDINT(hSintValue); // IndexOffset = The target handle
                    readSymbolValuesWriter.writeDINT(1); // size to read

                    //  "MAIN.intValue" // INT
                    readSymbolValuesWriter.writeDINT(TcAdsWebService.TcAdsReservedIndexGroups.SymbolValueByHandle); // IndexGroup
                    readSymbolValuesWriter.writeDINT(hIntValue); // IndexOffset = The target handle
                    readSymbolValuesWriter.writeDINT(2); // size to read

                    //  "MAIN.dintValue" // DINT
                    readSymbolValuesWriter.writeDINT(TcAdsWebService.TcAdsReservedIndexGroups.SymbolValueByHandle); // IndexGroup
                    readSymbolValuesWriter.writeDINT(hDintValue); // IndexOffset = The target handle
                    readSymbolValuesWriter.writeDINT(4); // size to read

                    //  "MAIN.realValue" // REAL
                    readSymbolValuesWriter.writeDINT(TcAdsWebService.TcAdsReservedIndexGroups.SymbolValueByHandle); // IndexGroup
                    readSymbolValuesWriter.writeDINT(hRealValue); // IndexOffset = The target handle
                    readSymbolValuesWriter.writeDINT(4); // size to read
                    
                    //  "MAIN.lrealValue" // LREAL
                    readSymbolValuesWriter.writeDINT(TcAdsWebService.TcAdsReservedIndexGroups.SymbolValueByHandle); // IndexGroup
                    readSymbolValuesWriter.writeDINT(hLrealValue); // IndexOffset = The target handle
                    readSymbolValuesWriter.writeDINT(8); // size to read
                    
                    */
                    

                    // Get Base64 encoded data from TcAdsWebService.DataWriter;
                    readSymbolValuesData = readSymbolValuesWriter.getBase64EncodedData();

                    // Start cyclic reading of symbol values;
                    readLoopID = window.setInterval(ReadLoop, readLoopDelay);

                    client.readwrite(
                    NETID,
                    PORT,
                    0xF080, // 0xF080 = Read command;
                    handlesCount, // IndexOffset = Variables count;
                    2 + (handlesCount * 4), // Length of requested data + 4 byte errorcode per variable;
                    readSymbolValuesData,
                    ReadCallback,
                    null,
                    general_timeout,
                    ReadTimeoutCallback,
                    true);



                } else {
                    console.log("-----------ERROR in RequestHandlesCallback-----------");
                    if (e.error.getTypeString() == "TcAdsWebService.ResquestError") {
                        // HANDLE TcAdsWebService.ResquestError HERE;
                        div_log.innerHTML = "Error: StatusText = " + e.error.statusText + " Status: " + e.error.status;
                    }
                    else if (e.error.getTypeString() == "TcAdsWebService.Error") {
                        // HANDLE TcAdsWebService.Error HERE;
                        div_log.innerHTML = "Error: ErrorMessage = " + e.error.errorMessage + " ErrorCode: " + e.error.errorCode;
                    }

                }

            });

            // Occurs if the readwrite for the sumcommando to request symbol handles runs into timeout;
            var RequestHandlesTimeoutCallback = (function () {
                // HANDLE TIMEOUT HERE;
                div_log.innerHTML = "Requuest handles timeout!";
            });

            // Interval callback for cyclic reading;
            var ReadLoop = (function () {

                // Send the read-read-write command to the TcAdsWebService by use of the readwrite function of the TcAdsWebService.Client object;
                client.readwrite(
                    NETID,
                    PORT,
                    0xF080, // 0xF080 = Read command;
                    handlesCount, // IndexOffset = Variables count;
                    2 + (handlesCount * 4), // Length of requested data + 4 byte errorcode per variable;
                    readSymbolValuesData,
                    ReadCallback,
                    null,
                    general_timeout,
                    ReadTimeoutCallback,
                    true);

            });

            // Occurs if the read-read-write command has finished;
            var ReadCallback = (function (e, s) {

                if (e && e.isBusy) {
                    // HANDLE PROGRESS TASKS HERE;
                    // Exit callback function because request is still busy;
                    return;
                }

                if (e && !e.hasError) {

                    var reader = e.reader;
                    
                    // Read error codes from begin of TcAdsWebService.DataReader object;
                    for (var i = 0; i < handlesVarNames.length; i++) {
                        var err = reader.readDWORD();
                        if (err != 0) {
                            div_log.innerHTML = "Symbol error!";
                            return;
                        }
                    }

                    //  "MAIN.byteValue" // BYTE
                    var intValue = reader.readINT();
                    /*
                    //  "MAIN.wordValue" // WORD
                    var wordValue = reader.readWORD();

                    //  "MAIN.dwordValue" // DWORD
                    var dwordValue = reader.readDWORD();

                    //  "MAIN.sintValue" // SINT
                    var sintValue = reader.readSINT();

                    //  "MAIN.intValue" // INT
                    var intValue = reader.readINT();

                    //  "MAIN.dintValue" // DINT
                    var dintValue = reader.readDINT();

                    //  "MAIN.realValue" // REAL
                    var realValue = reader.readREAL();

                    //  "MAIN.lrealValue" // LREAL
                    var lrealValue = reader.readLREAL();
                    */
                    // Write data to the user interface;
                    td_byteValue.innerHTML = intValue;
                    /*
                    td_wordValue.innerHTML = wordValue;
                    td_dwordValue.innerHTML = dwordValue;
                    td_sintValue.innerHTML = sintValue;
                    td_intValue.innerHTML = intValue;
                    td_dintValue.innerHTML = dintValue;
                    td_realValue.innerHTML = realValue;
                    td_lrealValue.innerHTML = lrealValue;
                    */
                } else {
                    if (e.error.getTypeString() == "TcAdsWebService.ResquestError") {
                        // HANDLE TcAdsWebService.ResquestError HERE;
                        div_log.innerHTML = "Error: StatusText = " + e.error.statusText + " Status: " + e.error.status;
                    }
                    else if (e.error.getTypeString() == "TcAdsWebService.Error") {
                        // HANDLE TcAdsWebService.Error HERE;
                        div_log.innerHTML = "Error: ErrorMessage = " + e.error.errorMessage + " ErrorCode: " + e.error.errorCode;
                    }
                }

            });
            
            // Occurs if the read-read-write command runs into timeout;
            var ReadTimeoutCallback = (function () {
                // HANDLE TIMEOUT HERE;
                div_log.innerHTML = "Read timeout!";
            });

            function registerButtonEvent(){
                var myBtn = document.getElementById('td_button');

                //add event listener
                myBtn.addEventListener('click', function(event) {
                    console.log("-----------BUTTON CLICKED-----------");
                    var writer = new TcAdsWebService.DataWriter();
                    // Write general write-read-write commando information to TcAdsWebService.DataWriter object;
                    var size = 0;
                    for (var i = 0; i < 1; i++) {
                        writer.writeDINT(TcAdsWebService.TcAdsReservedIndexGroups.SymbolValueByHandle);
                        writer.writeDINT(handle);
                        writer.writeDINT(handlesVarSize);

                        size = size + handlesVarSize;
                    }

                    // Write values to TcAdsWebService.DataWrite object;
                    writer.writeINT(parseFloat(0));

                    client.readwrite(
                        NETID,
                        PORT,
                        0xF081, // 0xF081 = Call Write SumCommando
                        1, // IndexOffset = Count of requested variables.
                        size+(1*4), // Length of requested data + 4 byte errorcode per variable.
                        writer.getBase64EncodedData(),
                        WriteCallback,
                        null,
                        general_timeout,
                        WriteTimeoutCallback,
                        true);
                    });

                };


            var WriteCallback = (function(e,s){

                if (e && e.isBusy) {
                    // HANDLE PROGRESS TASKS HERE;
                    var message = "Writing data to plc...";
                    div_log.innerHTML = message;
                    // Exit callback function because request is still busy;
                    return;
                }

                if (e && !e.hasError) {

                    var message = "Writing data successfully finished...";
                    div_log.innerHTML = message;

                } else {

                    if (e.error.getTypeString() == "TcAdsWebService.ResquestError") {
                        // HANDLE TcAdsWebService.ResquestError HERE;
                        div_log.innerHTML = "Error: StatusText = " + e.error.statusText + " Status: " + e.error.status;
                    }
                    else if (e.error.getTypeString() == "TcAdsWebService.Error") {
                        // HANDLE TcAdsWebService.Error HERE;
                        div_log.innerHTML = "Error: ErrorMessage = " + e.error.errorMessage + " ErrorCode: " + e.error.errorCode;
                    }

                }
            });

            // Occurs if the write-read-write command runs into timeout;
            var WriteTimeoutCallback = (function () {
                // HANDLE TIMEOUT HERE;
                div_log.innerHTML = "Write timeout!";
            });


            function getVariableHandle(){
                // Create sumcommando for reading twincat symbol handles by symbol name;
                var handlesWriterSetter = new TcAdsWebService.DataWriter();

                // Write general information for each symbol handle to the TcAdsWebService.DataWriter object;
                for (var i = 0; i < handlesVarNames.length; i++) {
                    handlesWriterSetter.writeDINT(TcAdsWebService.TcAdsReservedIndexGroups.SymbolHandleByName);
                    handlesWriterSetter.writeDINT(0);
                    handlesWriterSetter.writeDINT(4); // Expected size; A handle has a size of 4 byte;
                    handlesWriterSetter.writeDINT(handlesVarNames[i].length); // The length of the symbol name string;
                }

                // Write symbol names after the general information to the TcAdsWebService.DataWriter object;
                for (var i = 0; i < handlesVarNames.length; i++) {
                    handlesWriterSetter.writeString(handlesVarNames[i]);
                }

                // Send the list-read-write command to the TcAdsWebService by use of the readwrite function of the TcAdsWebService.Client object;
                client.readwrite(
                    NETID,
                    PORT,
                    0xF082,     // IndexGroup = ADS list-read-write command; Used to request handles for twincat symbols;
                    handlesVarNames.length, // IndexOffset = Count of requested symbol handles;
                    (handlesVarNames.length * 4) + (handlesVarNames.length * 8), // Length of requested data + 4 byte errorcode and 4 byte length per twincat symbol;
                    handlesWriterSetter.getBase64EncodedData(),
                    requestHandlesCallbackSetter,
                    null,
                    general_timeout,
                    requestHandlesCallbackTimeoutSetter,
                    true);
            };


            var requestHandlesCallbackSetter = (function (e, s) {
                if (e && e.isBusy) {
                    // HANDLE PROGRESS TASKS HERE;
                    var message = "Requesting symbol handles...";
                    div_log.innerHTML = message;
                    // Exit callback function because request is still busy;
                    return;
                }

                if (e && !e.hasError) {

                    // Get TcAdsWebService.DataReader object from TcAdsWebService.Response object;
                    var reader = e.reader;

                    // Read error code and length for each handle;
                    for (var i = 0; i < handlesVarNames.length; i++) {

                        var err = reader.readDWORD();
                        var len = reader.readDWORD();

                        if (err != 0) {
                            div_log.innerHTML = "Symbol handle error!";
                            return;
                        }

                    }

                    var message = "Symbol handles successfully created!";
                    div_log.innerHTML = message;

                    // Read handles from TcAdsWebService.DataReader object;
                    handle = reader.readDWORD();

                    console.log("-----------Handle Retrieved-----------");
                    console.log("   " + handle);
                    console.log("-----------END-----------");


                } else {

                    if (e.error.getTypeString() == "TcAdsWebService.ResquestError") {
                        // HANDLE TcAdsWebService.ResquestError HERE;
                        div_log.innerHTML = "Error: StatusText = " + e.error.statusText + " Status: " + e.error.status;
                    }
                    else if (e.error.getTypeString() == "TcAdsWebService.Error") {
                        // HANDLE TcAdsWebService.Error HERE;
                        div_log.innerHTML = "Error: ErrorMessage = " + e.error.errorMessage + " ErrorCode: " + e.error.errorCode;
                    }

                }
            });

            var requestHandlesCallbackTimeoutSetter = (function(){
                // HANDLE TIMEOUT HERE;
                div_log.innerHTML = "Requuest symbol handles timeout!";
            });

        })();

        var Base64 = (function () {

            var encode = function (data) {
                var out = "", c1, c2, c3, e1, e2, e3, e4;
                for (var i = 0; i < data.length; ) {
                    c1 = data.charCodeAt(i++);
                    c2 = data.charCodeAt(i++);
                    c3 = data.charCodeAt(i++);
                    e1 = c1 >> 2;
                    e2 = ((c1 & 3) << 4) + (c2 >> 4);
                    e3 = ((c2 & 15) << 2) + (c3 >> 6);
                    e4 = c3 & 63;
                    if (isNaN(c2))
                        e3 = e4 = 64;
                    else if (isNaN(c3))
                        e4 = 64;
                    out += tab.charAt(e1) + tab.charAt(e2) + tab.charAt(e3) + tab.charAt(e4);
                }
                return out;
            }

            var decode = function (data) {
                var out = "", c1, c2, c3, e1, e2, e3, e4;
                for (var i = 0; i < data.length; ) {
                    e1 = tab.indexOf(data.charAt(i++));
                    e2 = tab.indexOf(data.charAt(i++));
                    e3 = tab.indexOf(data.charAt(i++));
                    e4 = tab.indexOf(data.charAt(i++));
                    c1 = (e1 << 2) + (e2 >> 4);
                    c2 = ((e2 & 15) << 4) + (e3 >> 2);
                    c3 = ((e3 & 3) << 6) + e4;
                    out += String.fromCharCode(c1);
                    if (e3 != 64)
                        out += String.fromCharCode(c2);
                    if (e4 != 64)
                        out += String.fromCharCode(c3);
                }
                return out;
            }

            var tab = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
            return { encode: encode, decode: decode };
        })();
    </script>
</head>
<body>
    <h1>TcAdsWebService.js Sample01</h1>
    <h2>Cyclic reading of multiple variables with sumcommando!</h2>
    <table>
        <tr>
            <td>MAIN.byteValue:</td>
            <td id="td_byteValue"></td>
            <td id="td_button"><button type="button">Click Me!</button></td>
        </tr>
    </table>
    <div id="div_log"></div>
</body>
</html>
